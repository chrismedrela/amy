# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-07-18 11:39
from __future__ import unicode_literals

import functools
import re
from datetime import date

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.conf import settings
from django.contrib.auth.models import Permission, Group
from django.contrib.contenttypes.models import ContentType
from django.db import models, migrations
from django.db.models import F
from django.db.models import Q
from django.db.models.functions import Lower
from django_countries import countries

from workshops.models import (
    Airport, Award, Badge, Event, Organization, KnowledgeDomain, Lesson, Person,
    Qualification, Role, Tag, Task,
)


# [Done] Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# workshops.migrations.0007_migrate_countries_to_2char_iso31661
# workshops.migrations.0011_auto_20150612_0803
# workshops.migrations.0012_auto_20150612_0807
# workshops.migrations.0012_delete_deleted_events_tasks
# workshops.migrations.0021_add_knowledge_domains
# workshops.migrations.0022_auto_20150707_0617
# workshops.migrations.0025_auto_20150707_0809
# workshops.migrations.0026_add_missing_airports
# workshops.migrations.0035_auto_20150723_0958
# workshops.migrations.0039_add_permission_groups
# workshops.migrations.0040_add_country_to_online_events
# workshops.migrations.0040_auto_20150827_1715
# workshops.migrations.0040_invoice_status
# workshops.migrations.0044_add_dataanalysislevels
# workshops.migrations.0047_auto_20150916_0355
# workshops.migrations.0051_auto_20150929_0847
# workshops.migrations.0052_auto_20151003_0451
# workshops.migrations.0054_self_organized_host
# workshops.migrations.0059_auto_20151109_1006
# workshops.migrations.0060_published_help_text
# workshops.migrations.0062_add_stalled_unresponsive_tags
# workshops.migrations.0062_no_invoice_for_historic_events
# workshops.migrations.0064_dc_instructor_badge
# workshops.migrations.0070_maintainer_trainer_badge
# workshops.migrations.0072_underscore_usernames_fixed_migration
# workshops.migrations.0073_auto_20160127_0944
# workshops.migrations.0082_add_hackathon_tags
# workshops.migrations.0084_lowercase_emails

def migrate_to_2char_country_names(apps, schema_editor):
    Site = apps.get_model("workshops", "Site")
    Airport = apps.get_model("workshops", "Airport")

    # hard-coded list of mappings that fail to convert
    mapping = {
        'United-States': 'US',
        'United-Kingdom': 'GB',
        'European-Union': 'EU',
        None: None
    }

    for site in Site.objects.all():
        country = site.country
        if country in mapping:
            site.country = mapping[country]
        else:
            country = country.replace('-', ' ')
            site.country = countries.by_name(country)
        site.save()

    for airport in Airport.objects.all():
        country = airport.country
        if country in mapping:
            airport.country = mapping[country]
        else:
            country = country.replace('-', ' ')
            airport.country = countries.by_name(country)
        airport.save()


def remove_old_contentype(content_type, apps, schema_editor):
    """If we change model name, we need to remove its ContentType entry."""
    ContentType.objects.filter(app_label='workshops', model=content_type) \
                       .delete()


TRANSLATE_NAMES = {
    'Git': ['swc/git'],
    'Make': ['swc/make'],
    'Matlab': ['swc/matlab'],
    'Mercurial': ['swc/hg'],
    'Python': ['swc/python', 'dc/python'],
    'R': ['swc/r', 'dc/r'],
    'Regexp': ['swc/regexp'],
    'SQL': ['swc/sql', 'dc/sql'],
    'Subversion': ['swc/svn'],
    'Unix': ['swc/shell', 'dc/shell'],
    None: ['dc/spreadsheet', 'dc/cloud']
}

EXTRA_LEGACY_NAMES = ['MATLAB']


def add_new_lesson_names(apps, schema_editor):
    '''Add instances of Lesson named after lessons.'''
    Lesson = apps.get_model('workshops', 'Lesson')
    for (old_name, new_names) in TRANSLATE_NAMES.items():
        for name in new_names:
            Lesson.objects.create(name=name)


def fix_duplicate_names(apps, schema_editor):
    '''Fix references to lessons with case sensitivity in names.'''
    Lesson = apps.get_model('workshops', 'Lesson')
    Qualification = apps.get_model('workshops', 'Qualification')
    try:
        right_lesson = Lesson.objects.get(name='Matlab')
        wrong_lesson = Lesson.objects.get(name='MATLAB')
        Qualification.objects.filter(lesson=wrong_lesson) \
                             .update(lesson=right_lesson)
    except Lesson.DoesNotExist:
        pass


def replace_qualifications(apps, schema_editor):
    '''Add qualification entries with new lesson names and delete old ones.'''
    Lesson = apps.get_model('workshops', 'Lesson')
    Qualification = apps.get_model('workshops', 'Qualification')
    for q in Qualification.objects.all():
        old_name = q.lesson.name
        new_names = TRANSLATE_NAMES[old_name]
        for name in new_names:
            lesson = Lesson.objects.get(name=name)
            Qualification.objects.create(lesson=lesson,
                                         person=q.person)
        q.delete()


def remove_old_skill_names(apps, schema_editor):
    '''Remove legacy instances of Lesson named after skills.'''
    Lesson = apps.get_model('workshops', 'Lesson')
    for (old_name, new_names) in TRANSLATE_NAMES.items():
        if old_name:
            Lesson.objects.filter(name=old_name).delete()
    for old_name in EXTRA_LEGACY_NAMES:
        Lesson.objects.filter(name=old_name).delete()


def drop_deleted_object(model, apps, schema_editor):
    m = apps.get_model('workshops', model)
    m.objects.filter(deleted=True).delete()


DOMAINS = [
    'Space sciences',
    'Planetary sciences (geology, climatology, oceanography, etc.)',
    'Physics',
    'Chemistry',
    'Organismal biology (ecology, botany, zoology, microbiology)',
    'Genetics, genomics, bioinformatics',
    'Medicine',
    'Civil, mechanical, or chemical engineering',
    'Computer science/electrical engineering',
    'Economics/business',
    'Social sciences',
    'Psychology',
    'Humanities',
    'Library and information science',
    'Education',
]


def add_knowledge_domains(apps, schema_editor):
    '''Add instances of KnowledgeDomains.'''
    KnowledgeDomain = apps.get_model('workshops', 'KnowledgeDomain')
    for domain in DOMAINS:
        KnowledgeDomain.objects.create(name=domain)


def change_lesson_on_spreadsheets(apps, schema_editor):
    '''Change "dc/spreadsheet" → "dc/spreadsheets".'''
    Lesson = apps.get_model('workshops', 'Lesson')
    Lesson.objects.filter(name='dc/spreadsheet').update(name='dc/spreadsheets')


def change_knowledgedomain_names(apps, schema_editor):
    '''Change "Psychology" → "Psychology/neuroscience".
    Change "Civil, mechanical, or chemical engineering" to
    "Civil, mechanical, chemical, or nuclear engineering".
    Add "Mathematics/statistics" and "High performance computing".'''
    KnowledgeDomain = apps.get_model('workshops', 'KnowledgeDomain')
    KnowledgeDomain.objects.filter(name='Psychology') \
                           .update(name='Psychology/neuroscience')
    KnowledgeDomain.objects \
        .filter(name='Civil, mechanical, or chemical engineering') \
        .update(name='Civil, mechanical, chemical, or nuclear engineering')
    KnowledgeDomain.objects.create(name='Mathematics/statistics')
    KnowledgeDomain.objects.create(name='High performance computing')


AIRPORTS = [
    ('ALC', 'Alicante', 'ES', 38.2821999, -0.558156),
    ('ARB', 'Ann Arbor, MI', 'US', 42.2229996, -83.7455978),
    ('BGR', 'Bangor, ME', 'US', 44.8073997, -68.8281021),
    ('CVG', 'Cincinnati, KY', 'US', 39.0488014, -84.6678009),
    ('DAY', 'James M. Cox Dayton, OH', 'US', 39.902401, -84.2193985),
    ('GLE', 'Gainesville, TX', 'US', 33.651389, -97.196944),
    ('GNV', 'Gainesville, FL', 'US', 29.69, -82.271667),
    ('GRU', 'Sao Paulo Guarulhos', 'BR', -23.435556, -46.473056),
    ('GSP', 'Greenville Spartanburg, SC', 'US', 34.8956985, -82.2189026),
    ('ROA', 'Roanoke Blacksburg, VA', 'US', 37.3255005, -79.9754028),
    ('XNA', 'Fayetteville Springdale, AR', 'US', 36.2818985, -94.3068008),
    ('YQM', 'Moncton', 'CA', 46.1122017, -64.6785965),
    ('YTZ', 'Billy Bishop Toronto', 'CA', 43.6274986, -79.3962021),
]


def add_bunch_of_new_airports(apps, schema_editor):
    Airport = apps.get_model('workshops', 'Airport')
    for iata, fullname, country, latitude, longitude in AIRPORTS:
        Airport.objects.get_or_create(iata=iata, fullname=fullname,
                                      country=country, latitude=latitude,
                                      longitude=longitude)


def switch_host_to_tag(host_domain, new_host_domain, tag_name, tag_desc,
                       apps, schema_editor):
    Host = apps.get_model('workshops', 'Host')
    Event = apps.get_model('workshops', 'Event')
    Tag = apps.get_model('workshops', 'Tag')
    try:
        # get host that's about to be removed
        host = Host.objects.get(domain=host_domain)

        # get new host
        new_host = Host.objects.get(domain=new_host_domain)

        # get a replacement tag
        tag, _ = Tag.objects.get_or_create(name=tag_name,
                                           defaults={'details': tag_desc})

        events = Event.objects.filter(host=host).exclude(tags__in=[tag]) \
            .prefetch_related('tags')

        # add missing tag
        for event in events:
            event.tags.add(tag)

        # update to the new host
        Event.objects.filter(host=host) \
            .update(host=new_host)

        # nullify administrators, if any used the late host
        Event.objects.filter(administrator=host).update(administrator=None)

        # Drop old host
        # We can delete because the only protected deletion is at `Event.host`
        # and `Event.administrator` - both of which we updated.
        host.delete()

    except Host.DoesNotExist:
        pass


def add_permission_groups(apps, schema_editor):
    # create 'administrators' group with all permissions for CRUD
    # ContentType = apps.get_model('contenttypes', 'ContentType')
    # Permission = apps.get_model('auth', 'Permission')
    # Group = apps.get_model('auth', 'Group')
    auth_ct = ContentType.objects.get_for_models(Permission, Group)
    workshops_ct = ContentType.objects.get_for_models(
        Airport, Award, Badge, Event, Organization, KnowledgeDomain, Lesson, Person,
        Qualification, Role, Tag, Task,
    )
    auth_ct.update(workshops_ct)
    permissions = Permission.objects.filter(content_type__in=auth_ct.values())

    group = Group.objects.create(name='administrators')
    group.permissions = permissions
    group.save()

    # create 'steering committee' group, but don't grant any permissions (cause
    # read-only access doesn't require any)
    Group.objects.create(name='steering committee')


def add_country_to_online_events(apps, schema_editor):
    """Add an 'Online' country to all events tagged with 'online' tag."""
    Event = apps.get_model('workshops', 'Event')

    Tag = apps.get_model('workshops', 'Tag')
    online, _ = Tag.objects.get_or_create(
        name='online',
        defaults={'details': 'Events taking place entirely online'},
    )

    # Oceanic Pole of Inaccessibility coordinates:
    # https://en.wikipedia.org/wiki/Pole_of_inaccessibility#Oceanic_pole_of_inaccessibility
    latitude = -48.876667
    longitude = -123.393333

    Event.objects.filter(country__isnull=True, tags__in=[online]) \
                 .update(country='W3', latitude=latitude, longitude=longitude,
                         venue='Internet')


def add_academic_levels(apps, schema_editor):
    AcademicLevel = apps.get_model('workshops', 'AcademicLevel')
    names = [
        'Undergraduate or below',
        'Graduate',
        'Post-doctorate',
        'Faculty',
        'Industry',
        'Don\'t know yet',
    ]
    for name in names:
        AcademicLevel.objects.create(name=name)


def add_comp_exp_levels(apps, schema_editor):
    ComputingExperienceLevel = apps.get_model('workshops',
                                              'ComputingExperienceLevel')
    names = [
        'Novice (uses a spreadsheet for data analysis rather than writing code)',
        'Intermediate (can write a few lines of code for personal use)',
        'Proficient (writes multi-page programs which may be shared with others)',
        'Don\'t know yet',
    ]
    for name in names:
        ComputingExperienceLevel.objects.create(name=name)


def migrate_invoiced(apps, schema_editor):
    """Migrate `invoiced` bool field into `invoice_status` text field."""
    Event = apps.get_model('workshops', 'Event')

    # null → 'unknown'
    Event.objects.filter(invoiced__isnull=True) \
        .update(invoice_status='unknown')
    # true → 'invoiced'
    Event.objects.filter(invoiced=True) \
        .update(invoice_status='invoiced')
    # false → 'invoiced'
    Event.objects.filter(invoiced=False) \
        .update(invoice_status='not-invoiced')


def add_data_analysis_levels(apps, schema_editor):
    DataAnalysisLevel = apps.get_model('workshops', 'DataAnalysisLevel')
    L = [
        'Little to no prior computational experience',
        'Some experience with data analysis in programming languages like R,'
            ' SAS, Matlab or Python',
        'Experienced in data analysis, but need to know how to work with '
            'different data types or bigger data or computer cluster',
    ]
    for name in L:
        DataAnalysisLevel.objects.create(name=name)


def add_empty_knowledge_domain(apps, schema_app):
    "A 'Don't know yet' KnowledgeDomain is required for EventRequest forms."
    KnowledgeDomain = apps.get_model('workshops', 'KnowledgeDomain')
    KnowledgeDomain.objects.get_or_create(name='Don\'t know yet')


def update_event_attendance_from_tasks(model, event):
    """Increase event.attendance if there's more learner tasks belonging to the
    event."""
    learners = event.task_set.filter(role__name='learner').count()
    model.objects \
        .filter(pk=event.pk) \
        .filter(Q(attendance__lt=learners) | Q(attendance__isnull=True)) \
        .update(attendance=learners)


def update_attendance_for_historical_events(apps, schema_editor):
    """Count attendance for events in the database."""
    Event = apps.get_model('workshops', 'Event')
    for event in Event.objects.all():
        update_event_attendance_from_tasks(Event, event)

REPO_REGEX = re.compile(r'https?://github\.com/(?P<name>[^/]+)/'
                        r'(?P<repo>[^/]+)/?')

WEBSITE_REGEX = re.compile(r'https?://(?P<name>[^.]+)\.github\.'
                           r'(io|com)/(?P<repo>[^/]+)/?')
WEBSITE_FORMAT = 'https://{name}.github.io/{repo}/'


def website_url(url):
    """Return URL formatted as it was website URL.

    Website URL is as specified in WEBSITE_FORMAT.
    If it doesn't match, the original URL is returned."""
    try:
        # Try to match website regex first. This will result in all website
        # URLs always formatted in the same way.
        mo = (WEBSITE_REGEX.match(url)
              or REPO_REGEX.match(url))
        if not mo:
            return url

        return WEBSITE_FORMAT.format(**mo.groupdict())
    except (TypeError, KeyError):
        # TypeError: url is None
        # KeyError: mo.groupdict doesn't supply required names to format
        return url


def switch_events_to_website_urls(apps, schema_editor):
    """For every event in the DB, try to save it's URL as website URL.

    The rules are:
    * if current URL matches any known URL syntax, the resulting URL will be
      in format https://user.github.io/repository/ (got from event.website_url)
    * if it doesn't match, the URL won't change.
    """
    Event = apps.get_model('workshops', 'Event')

    for event in Event.objects.all():
        # Tricky: "apps.get_model" returns model without properties.
        # But we need event.website_url, which is a @property.  So I decided to
        # "copy" the Event.website_url into website_url() above.
        event.url = website_url(event.url)
        event.save()


def add_self_organized_host(apps, schema_editor):
    """Make new host: self-organized."""
    Host = apps.get_model('workshops', 'Host')
    Host.objects.create(domain='self-organized', fullname='self-organized',
                        country='W3')


def update_administrator_to_self_organized(apps, schema_editor):
    """Find all events that were self-organized and set administrator for them
    to be "self-organized"."""
    Host = apps.get_model('workshops', 'Host')
    self_org = Host.objects.get(fullname='self-organized')

    Event = apps.get_model('workshops', 'Event')
    Event.objects.filter(administrator__isnull=True) \
        .filter(
            Q(invoice_status='na-self-org') |
            Q(notes__contains='self-organized') |
            Q(notes__contains='self organized')
        ) \
        .update(administrator=self_org)


def make_people_with_usable_passwords_active(apps, schema_editor):
    """Password is unusable if:
    * it's empty, or
    * it starts with "!", or
    * it's using unknown hasher algorithm.

    We can iteratively test all people for all possible passwords, but the
    easiest way is forget about checking the hasher - since I know AMY has
    never changed it.
    """
    no_password = Q(password__isnull=True)
    empty_password = Q(password__exact="")
    unusable_password = Q(password__startswith="!")
    Person = apps.get_model('workshops', 'Person')
    Person.objects.exclude(no_password | empty_password | unusable_password) \
                  .update(is_active=True)


def add_address_to_online_events(apps, schema_editor):
    """Set Event.address if empty for online events."""
    Event = apps.get_model('workshops', 'Event')
    Tag = apps.get_model('workshops', 'Tag')
    online = Tag.objects.get(name='online')  # should be created via 0040_*

    Event.objects.filter(tags__in=[online]) \
                 .filter(models.Q(address=None) | models.Q(address='')) \
                 .update(address='Internet')
    Event.objects.filter(country='W3') \
                 .filter(models.Q(address=None) | models.Q(address='')) \
                 .update(address='Internet')


def add_stalled_unresponsive_tags(apps, schema_editor):
    """Add "stalled" and "unresponsive" tags."""
    Tag = apps.get_model('workshops', 'Tag')
    Tag.objects.create(
        name='stalled',
        details='Events with lost contact with the host or TTT events that '
                'aren\'t running.',
    )
    Tag.objects.create(
        name='unresponsive',
        details='Events whose hosts and/or organizers aren\'t going to send '
                'attendance data',
    )

START_OF_MODERNITY = date(2014, 1, 1)

def no_invoice_for_historical_events(apps, schema_editor):
    """Set invoice status for historical (<2014) events."""
    Event = apps.get_model('workshops', 'Event')
    Event.objects \
        .filter(start__lt=START_OF_MODERNITY, invoice_status='unknown') \
        .update(invoice_status='ni-historic')


def mark_historical_events_completed(apps, schema_editor):
    """Set invoice status for historical (<2014) events."""
    Event = apps.get_model('workshops', 'Event')
    Event.objects \
        .filter(start__lt=date(2014, 1, 1), completed=False) \
        .update(completed=True)


def change_instructor_badge_to_swc_instructor(apps, schemat_editor):
    """Get 'Instructor' badge, change it to 'Software Carpentry Instructor'."""
    Badge = apps.get_model('workshops', 'Badge')

    # it may not exist, for example in tests
    instructor, _ = Badge.objects.get_or_create(name='instructor')
    # new attributes:
    instructor.name = 'swc-instructor'
    instructor.title = 'Software Carpentry Instructor'
    instructor.criteria = 'Teaching at Software Carpentry workshops or online'
    instructor.save()


def add_dc_instructor_badge(apps, schemat_editor):
    """Add 'Data Carpentry Instructor' badge."""
    Badge = apps.get_model('workshops', 'Badge')
    Badge.objects.create(
        name='dc-instructor', title='Data Carpentry Instructor',
        criteria='Teaching at Data Carpentry workshops or online',
    )


def add_maintainer_badge(apps, schema_editor):
    Badge = apps.get_model('workshops', 'Badge')
    Badge.objects.create(name='maintainer', title='Maintainer', criteria='Maintainer of Software or Data Carpentry lesson')
    Badge.objects.create(name='trainer', title='Trainer', criteria='Teaching instructor training workshops')


def change_dots_to_underscores(apps, schemat_editor):
    """Replace '.' with '_' in every username."""
    Person = apps.get_model('workshops', 'Person')
    persons = Person.objects.filter(username__contains='.')
    for person in persons:
        person.username = person.username.replace('.', '_')
        person.save()


def switch_invoice_ni_to_na(apps, schema_editor):
    """Switch 'not invoiced' to 'not applicable' in events' invoice status."""
    Event = apps.get_model('workshops', 'Event')
    Event.objects.filter(invoice_status='ni-historic') \
                 .update(invoice_status='na-historic')
    Event.objects.filter(invoice_status='ni-member') \
                 .update(invoice_status='na-member')


def add_hackathon_tags(apps, schema_editor):
    """Add "hackathon tags."""
    Tag = apps.get_model('workshops', 'Tag')
    Tag.objects.create(
        name='hackathon',
        details='Event is a hackathon',
    )


def lowercase_emails(apps, schemat_editor):
    """Replace '.' with '_' in every username."""
    Person = apps.get_model('workshops', 'Person')
    # first: annotate everyone with their email lower-cased
    persons = Person.objects.all().annotate(lower_email=Lower('email'))
    # then: update the email to the lower-cased email
    persons.update(email=F('lower_email'))


class Migration(migrations.Migration):

    replaces = [('workshops', '0001_initial'), ('workshops', '0002_auto_20150219_1305'), ('workshops', '0003_remove_person_slug'), ('workshops', '0003_auto_20150227_1245'), ('workshops', '0004_merge'), ('workshops', '0005_auto_20150506_0848'), ('workshops', '0005_auto_20150404_0953'), ('workshops', '0006_merge'), ('workshops', '0007_auto_20150530_0537'), ('workshops', '0008_person_notes'), ('workshops', '0007_auto_20150525_0906'), ('workshops', '0008_auto_20150525_1547'), ('workshops', '0009_merge'), ('workshops', '0007_migrate_countries_to_2char_iso31661'), ('workshops', '0008_auto_20150522_1304'), ('workshops', '0010_merge'), ('workshops', '0011_auto_20150611_0947'), ('workshops', '0012_delete_deleted_events_tasks'), ('workshops', '0013_auto_20150611_0853'), ('workshops', '0011_auto_20150618_0231'), ('workshops', '0014_merge'), ('workshops', '0011_person_badges'), ('workshops', '0015_merge'), ('workshops', '0011_remove_event_published'), ('workshops', '0012_auto_20150617_2200'), ('workshops', '0013_auto_20150619_1026'), ('workshops', '0016_merge'), ('workshops', '0011_auto_20150612_0803'), ('workshops', '0012_auto_20150612_0807'), ('workshops', '0017_merge'), ('workshops', '0018_auto_20150629_1034'), ('workshops', '0019_knowledgedomain'), ('workshops', '0020_person_domains'), ('workshops', '0021_add_knowledge_domains'), ('workshops', '0022_auto_20150706_0240'), ('workshops', '0023_auto_20150706_0254'), ('workshops', '0022_auto_20150707_0617'), ('workshops', '0024_merge'), ('workshops', '0025_auto_20150707_0809'), ('workshops', '0026_add_missing_airports'), ('workshops', '0027_auto_20150714_1143'), ('workshops', '0028_person_affiliation'), ('workshops', '0029_auto_20150720_0258'), ('workshops', '0030_auto_20150720_0311'), ('workshops', '0031_auto_20150720_0344'), ('workshops', '0032_auto_20150721_0400'), ('workshops', '0033_auto_20150721_0426'), ('workshops', '0034_auto_20150723_0431'), ('workshops', '0035_auto_20150723_0958'), ('workshops', '0036_event_contact'), ('workshops', '0037_auto_20150728_0227'), ('workshops', '0038_auto_20150809_0534'), ('workshops', '0039_academiclevel_computingexperiencelevel_eventrequest'), ('workshops', '0040_auto_20150827_1715'), ('workshops', '0041_profileupdaterequest'), ('workshops', '0039_add_permission_groups'), ('workshops', '0042_merge'), ('workshops', '0043_auto_20150903_1508'), ('workshops', '0044_add_dataanalysislevels'), ('workshops', '0045_auto_20150907_1511'), ('workshops', '0046_eventrequest_language'), ('workshops', '0047_auto_20150916_0355'), ('workshops', '0048_auto_20150916_0441'), ('workshops', '0049_auto_20150916_0544'), ('workshops', '0040_add_country_to_online_events'), ('workshops', '0050_merge'), ('workshops', '0051_auto_20150929_0847'), ('workshops', '0040_invoice_status'), ('workshops', '0052_merge'), ('workshops', '0052_auto_20151003_0451'), ('workshops', '0053_merge'), ('workshops', '0054_self_organized_host'), ('workshops', '0055_auto_20151031_0832'), ('workshops', '0054_auto_20151021_1347'), ('workshops', '0056_merge'), ('workshops', '0055_todoitem'), ('workshops', '0057_merge'), ('workshops', '0058_auto_20151105_1452'), ('workshops', '0059_auto_20151109_1006'), ('workshops', '0060_published_help_text'), ('workshops', '0060_auto_20151111_1245'), ('workshops', '0061_merge'), ('workshops', '0062_no_invoice_for_historic_events'), ('workshops', '0062_add_stalled_unresponsive_tags'), ('workshops', '0063_merge'), ('workshops', '0064_membership'), ('workshops', '0065_multiple_memberships'), ('workshops', '0064_dc_instructor_badge'), ('workshops', '0066_merge'), ('workshops', '0067_person_username_regexvalidator'), ('workshops', '0068_auto_20160119_1247'), ('workshops', '0068_auto_20160119_0629'), ('workshops', '0069_merge'), ('workshops', '0068_fix_underscores_in_usernames'), ('workshops', '0070_merge'), ('workshops', '0070_maintainer_trainer_badge'), ('workshops', '0071_merge'), ('workshops', '0072_underscore_usernames_fixed_migration'), ('workshops', '0073_auto_20160127_0944'), ('workshops', '0074_event_request'), ('workshops', '0075_invoicerequest'), ('workshops', '0076_auto_20160208_0934'), ('workshops', '0077_auto_20160208_1220'), ('workshops', '0078_auto_20160212_1257'), ('workshops', '0079_eventsubmission'), ('workshops', '0080_award_awarded_by'), ('workshops', '0081_profileupdaterequest_notes'), ('workshops', '0082_add_hackathon_tags'), ('workshops', '0083_auto_20160323_1554'), ('workshops', '0084_lowercase_emails'), ('workshops', '0084_auto_20160326_0402'), ('workshops', '0085_merge'), ('workshops', '0086_auto_20160416_0905')]

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('personal', models.CharField(max_length=100)),
                ('middle', models.CharField(blank=True, max_length=100, null=True)),
                ('family', models.CharField(max_length=100)),
                ('email', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('may_contact', models.BooleanField(default=True)),
                ('github', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('twitter', models.CharField(blank=True, max_length=40, null=True, unique=True)),
                ('url', models.CharField(blank=True, max_length=100, null=True)),
                ('slug', models.CharField(blank=True, max_length=100, null=True)),
                ('username', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Airport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iata', models.CharField(max_length=10, unique=True)),
                ('fullname', models.CharField(max_length=100, unique=True)),
                ('country', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('title', models.CharField(max_length=40)),
                ('criteria', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.BooleanField(default=False)),
                ('start', models.DateField(blank=True, null=True)),
                ('end', models.DateField(blank=True, null=True)),
                ('slug', models.CharField(blank=True, max_length=100, null=True)),
                ('url', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('reg_key', models.CharField(blank=True, max_length=20, null=True)),
                ('attendance', models.IntegerField(blank=True, null=True)),
                ('admin_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('fee_paid', models.NullBooleanField(default=False)),
                ('notes', models.TextField(blank=True, default='')),
            ],
            options={
                'ordering': ('-start',),
            },
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('fullname', models.CharField(max_length=100, unique=True)),
                ('country', models.CharField(max_length=100, null=True)),
                ('notes', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('details', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Event')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Role')),
                ('deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='qualification',
            name='skill',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Skill'),
        ),
        migrations.AddField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizer', to='workshops.Site'),
        ),
        migrations.AddField(
            model_name='event',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Site'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(to='workshops.Tag'),
        ),
        migrations.AddField(
            model_name='award',
            name='badge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Badge'),
        ),
        migrations.AddField(
            model_name='award',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='workshops.Event'),
        ),
        migrations.AddField(
            model_name='award',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='person',
            name='airport',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='workshops.Airport'),
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.RemoveField(
            model_name='person',
            name='slug',
        ),
        migrations.AlterUniqueTogether(
            name='task',
            unique_together=set([('event', 'person', 'role')]),
        ),
        migrations.AddField(
            model_name='event',
            name='deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='person',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.RenameField(
            model_name='event',
            old_name='fee_paid',
            new_name='invoiced',
        ),
        migrations.AddField(
            model_name='person',
            name='notes',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterUniqueTogether(
            name='award',
            unique_together=set([('person', 'badge')]),
        ),
        migrations.RunPython(
            code=migrate_to_2char_country_names,
        ),
        migrations.AlterField(
            model_name='airport',
            name='country',
            field=django_countries.fields.CountryField(max_length=2),
        ),
        migrations.AlterField(
            model_name='site',
            name='country',
            field=django_countries.fields.CountryField(max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='organizer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='organizer', to='workshops.Site'),
        ),
        migrations.AlterField(
            model_name='event',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='workshops.Site'),
        ),
        migrations.AlterField(
            model_name='person',
            name='airport',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshops.Airport'),
        ),
        migrations.RunPython(
            code=functools.partial(drop_deleted_object, 'Task'),
        ),
        migrations.RunPython(
            code=functools.partial(drop_deleted_object, 'Event'),
        ),
        migrations.RemoveField(
            model_name='event',
            name='deleted',
        ),
        migrations.RemoveField(
            model_name='task',
            name='deleted',
        ),
        migrations.AlterField(
            model_name='site',
            name='country',
            field=django_countries.fields.CountryField(blank=True, max_length=2, null=True),
        ),
        migrations.AddField(
            model_name='person',
            name='badges',
            field=models.ManyToManyField(through='workshops.Award', to='workshops.Badge'),
        ),
        migrations.RemoveField(
            model_name='event',
            name='published',
        ),
        migrations.AlterField(
            model_name='event',
            name='url',
            field=models.CharField(blank=True, help_text='Setting this "publishes" the event.', max_length=100, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='start',
            field=models.DateField(blank=True, help_text='Setting this and url "publishes" the event.', null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='url',
            field=models.CharField(blank=True, help_text='Setting this and startdate "publishes" the event.', max_length=100, null=True, unique=True),
        ),
        migrations.RenameModel(
            old_name='Skill',
            new_name='Lesson',
        ),
        migrations.RenameField(
            model_name='qualification',
            old_name='skill',
            new_name='lesson',
        ),
        migrations.RunPython(
            code=functools.partial(remove_old_contentype, 'skill'),
        ),
        migrations.RunPython(
            code=add_new_lesson_names,
        ),
        migrations.RunPython(
            code=fix_duplicate_names,
        ),
        migrations.RunPython(
            code=replace_qualifications,
        ),
        migrations.RunPython(
            code=remove_old_skill_names,
        ),
        migrations.AddField(
            model_name='person',
            name='lessons',
            field=models.ManyToManyField(through='workshops.Qualification', to='workshops.Lesson'),
        ),
        migrations.CreateModel(
            name='KnowledgeDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.AddField(
            model_name='person',
            name='domains',
            field=models.ManyToManyField(to='workshops.KnowledgeDomain'),
        ),
        migrations.RunPython(
            code=add_knowledge_domains,
        ),
        migrations.AlterField(
            model_name='event',
            name='reg_key',
            field=models.CharField(blank=True, max_length=20, null=True, verbose_name='Eventbrite key'),
        ),
        migrations.AlterField(
            model_name='airport',
            name='fullname',
            field=models.CharField(max_length=100, unique=True, verbose_name='Airport name'),
        ),
        migrations.AlterField(
            model_name='airport',
            name='iata',
            field=models.CharField(help_text='<a href="https://www.world-airport-codes.com/">Look up code</a>', max_length=10, unique=True, verbose_name='IATA code'),
        ),
        migrations.RunPython(
            code=change_lesson_on_spreadsheets,
        ),
        migrations.RunPython(
            code=change_knowledgedomain_names,
        ),
        migrations.RunPython(
            code=add_bunch_of_new_airports,
        ),
        migrations.AlterField(
            model_name='event',
            name='slug',
            field=models.CharField(blank=True, max_length=100, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='person',
            name='affiliation',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AlterModelOptions(
            name='lesson',
            options={'ordering': ['name']},
        ),
        migrations.AlterField(
            model_name='award',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshops.Event'),
        ),
        migrations.AlterField(
            model_name='event',
            name='attendance',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='admin_fee',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.RenameModel(
            old_name='Site',
            new_name='Host',
        ),
        migrations.RenameField(
            model_name='event',
            old_name='site',
            new_name='host',
        ),
        migrations.RenameField(
            model_name='event',
            old_name='organizer',
            new_name='administrator',
        ),
        migrations.AlterField(
            model_name='event',
            name='administrator',
            field=models.ForeignKey(blank=True, help_text='Organization responsible for administrative work. Leave blank if self-organized.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='administrator', to='workshops.Host'),
        ),
        migrations.AlterField(
            model_name='event',
            name='host',
            field=models.ForeignKey(help_text='Organization hosting the event.', on_delete=django.db.models.deletion.PROTECT, to='workshops.Host'),
        ),
        migrations.AddField(
            model_name='event',
            name='address',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.AddField(
            model_name='event',
            name='country',
            field=django_countries.fields.CountryField(blank=True, max_length=2, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='latitude',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='longitude',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='venue',
            field=models.CharField(blank=True, default='', max_length=100),
        ),
        migrations.RunPython(
            code=functools.partial(switch_host_to_tag, 'WISE', 'software-carpentry.org', 'WiSE', 'Women in Science and Engineering'),
        ),
        migrations.RunPython(
            code=functools.partial(switch_host_to_tag, 'online', 'software-carpentry.org', 'online', 'Events taking place entirely online'),
        ),
        migrations.AddField(
            model_name='event',
            name='contact',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AlterModelOptions(
            name='host',
            options={'ordering': ('domain',)},
        ),
        migrations.AlterField(
            model_name='event',
            name='address',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.AlterField(
            model_name='event',
            name='venue',
            field=models.CharField(blank=True, default='', max_length=255),
        ),
        migrations.CreateModel(
            name='AcademicLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='ComputingExperienceLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='EventRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=40)),
                ('email', models.EmailField(max_length=254)),
                ('affiliation', models.CharField(help_text='University or Company', max_length=100)),
                ('location', models.CharField(help_text='City, Province or State, Country', max_length=100)),
                ('preferred_date', models.CharField(help_text='Please indicate when you would like to run the workshop. A range of a few weeks is most helpful, although we will try and accommodate requests to run workshops alongside conferences, etc.', max_length=100, verbose_name='Preferred workshop date')),
                ('approx_attendees', models.CharField(choices=[('20-40', '20-40 (one room, two instructors)'), ('40-80', '40-80 (two rooms, four instructors)'), ('80-120', '80-120 (three rooms, six instructors)')], default='20-40', help_text="This number doesn't need to be precise, but will help us decide how many instructors your workshop will need.", max_length=40, verbose_name='Approximate number of Attendees')),
                ('attendee_domains_other', models.CharField(blank=True, default='', help_text='If none of the fields above works for you.', max_length=100, verbose_name='Other field')),
                ('cover_travel_accomodation', models.BooleanField(default=False, verbose_name="My institution will cover instructors' travel and accommodation costs.")),
                ('understand_admin_fee', models.BooleanField(default=False, verbose_name="I understand the Software Carpentry Foundation's administrative fee.")),
                ('admin_fee_payment', models.CharField(choices=[('NP1', 'Non-profit: full fee for first workshop/year (US$1250)'), ('NP2', 'Non-profit: reduced fee for subsequent workshop/year (US$750)'), ('FP1', 'For-profit: full fee for first workshop/year (US$5000)'), ('FP2', 'For profit: reduced fee for subsequent workshop/year (US$3000)'), ('partner', 'No fee (my organization is a Partner or Affiliate)'), ('self-organized', 'No fee (self-organized workshop)'), ('waiver', 'Waiver requested (please give details in "Anything else")')], default='NP1', max_length=40, verbose_name='Which of the following applies to your payment for the administrative fee?')),
                ('comment', models.TextField(blank=True, help_text='What else do you want us to know about your workshop? About your attendees? About you?', verbose_name='Anything else?')),
                ('attendee_academic_levels', models.ManyToManyField(help_text='If you know the academic level(s) of your attendees, indicate them here.', to='workshops.AcademicLevel', verbose_name="Attendees' Academic Level")),
                ('attendee_computing_levels', models.ManyToManyField(help_text="Indicate the attendees' level of computing experience, if known. We will ask attendees to fill in a skills survey before the workshop, so this answer can be an approximation.", to='workshops.ComputingExperienceLevel', verbose_name="Attendees' level of computing experience")),
                ('attendee_domains', models.ManyToManyField(blank=True, help_text="The attendees' academic field(s) of study, if known.", to='workshops.KnowledgeDomain', verbose_name='Attendee Field(s)')),
            ],
        ),
        migrations.RunPython(
            code=add_academic_levels,
        ),
        migrations.RunPython(
            code=add_comp_exp_levels,
        ),
        migrations.CreateModel(
            name='ProfileUpdateRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('personal', models.CharField(max_length=100, verbose_name='Personal (first) name')),
                ('family', models.CharField(max_length=100, verbose_name='Family (last) name')),
                ('email', models.CharField(max_length=100, verbose_name='Email address')),
                ('affiliation', models.CharField(help_text='What university, company, lab, or other organization are you affiliated with (if any)?', max_length=100)),
                ('airport_iata', models.CharField(help_text='Please use its 3-letter IATA code (<a href="http://www.airportcodes.aero/">http://www.airportcodes.aero/</a>) to tell us where you\'re located.', max_length=3, verbose_name='Nearest major airport')),
                ('occupation', models.CharField(blank=True, choices=[(None, 'Prefer not to say'), ('undergrad', 'Undergraduate student'), ('grad', 'Graduate student'), ('postdoc', 'Post-doctoral researcher'), ('faculty', 'Faculty'), ('research', 'Research staff (including research programmer)'), ('support', 'Support staff (including technical support)'), ('librarian', 'Librarian/archivist'), ('commerce', 'Commercial software developer '), ('', 'Other (enter below)')], help_text='Please choose the one that best describes you.', max_length=40, null=True, verbose_name='What is your current occupation/career stage?')),
                ('occupation_other', models.CharField(blank=True, default='', max_length=100, verbose_name='Other occupation/career stage')),
                ('github', models.CharField(blank=True, default='', help_text='Please provide your username, not a numeric user ID.', max_length=100, verbose_name='GitHub username')),
                ('twitter', models.CharField(blank=True, default='', help_text='Please, do not put "@" at the beginning.', max_length=100, verbose_name='Twitter username')),
                ('orcid', models.CharField(blank=True, default='', max_length=100, verbose_name='ORCID ID')),
                ('website', models.CharField(blank=True, default='', max_length=100, verbose_name='Personal website')),
                ('gender', models.CharField(blank=True, choices=[(None, 'Prefer not to say'), ('F', 'Female'), ('M', 'Male'), ('O', 'Other (enter below)')], max_length=1, null=True)),
                ('gender_other', models.CharField(blank=True, default='', max_length=100, verbose_name='Other gender')),
                ('domains_other', models.CharField(blank=True, default='', max_length=255, verbose_name='Other areas of expertise')),
                ('lessons_other', models.CharField(blank=True, default='', help_text='Please include lesson URLs.', max_length=255, verbose_name="Other topics/lessons you're comfortable teaching")),
                ('domains', models.ManyToManyField(blank=True, help_text='Please check all that apply.', to='workshops.KnowledgeDomain', verbose_name='Areas of expertise')),
                ('lessons', models.ManyToManyField(blank=True, help_text='Please mark ALL that apply.', to='workshops.Lesson', verbose_name="Topic and lessons you're comfortable teaching")),
            ],
        ),
        migrations.RunPython(
            code=add_permission_groups,
        ),
        migrations.CreateModel(
            name='DataAnalysisLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='conference',
            field=models.CharField(blank=True, default='', max_length=100, verbose_name='If the workshop is to be associated with a conference or meeting, which one? '),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='country',
            field=django_countries.fields.CountryField(default='US', max_length=2),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='data_types',
            field=models.CharField(blank=True, choices=[('survey', 'Survey data (ecology, biodiversity, social science)'), ('genomic', 'Genomic data'), ('geospatial', 'Geospatial data'), ('text-mining', 'Text mining'), ('', 'Other (type below)')], max_length=40, verbose_name='We currently have developed or are developing workshops focused on four types of data. Please let us know which workshop would best suit your needs.'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='data_types_other',
            field=models.CharField(blank=True, max_length=100, verbose_name='Other data domains for the workshop'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='fee_waiver_request',
            field=models.BooleanField(default=False, help_text="Waiver's of the administrative fee are available on a needs basis. If you are interested in submitting a waiver application please indicate here.", verbose_name='I would like to submit an administrative fee waiver application'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='travel_reimbursement',
            field=models.CharField(blank=True, choices=[('', "Don't know yet."), ('book', 'Book travel through our university or program.'), ('reimburse', 'Book their own travel and be reimbursed.'), ('', 'Other (type below)')], default=None, max_length=40, null=True, verbose_name='For instructor travel, how will instructors be reimbursed?'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='travel_reimbursement_other',
            field=models.CharField(blank=True, max_length=100, verbose_name='Other type of reimbursement'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='workshop_type',
            field=models.CharField(choices=[('swc', 'Software-Carpentry'), ('dc', 'Data-Carpentry')], default='swc', max_length=40),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='attendee_domains',
            field=models.ManyToManyField(blank=True, help_text="The attendees' academic field(s) of study, if known.", to='workshops.KnowledgeDomain', verbose_name='Domains or topic of interest for target audience'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='attendee_domains_other',
            field=models.CharField(blank=True, default='', help_text='If none of the fields above works for you.', max_length=100, verbose_name='Other domains or topics of interest'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='location',
            field=models.CharField(help_text='City, Province or State', max_length=100),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='preferred_date',
            field=models.CharField(help_text='Please indicate when you would like to run the workshop. A range of at least a month is most helpful, although if you have a specific date or dates you need the workshop, we will try to accommodate those requests.', max_length=255, verbose_name='Preferred workshop date'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='understand_admin_fee',
            field=models.BooleanField(default=False, help_text='<a href="http://software-carpentry.org/blog/2015/07/changes-to-admin-fee.html">Look up administration fees</a>', verbose_name="I understand the Software Carpentry Foundation's administration fee."),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='attendee_data_analysis_level',
            field=models.ManyToManyField(help_text="If you know, indicate learner's general level of data analysis experience", to='workshops.DataAnalysisLevel', verbose_name='Level of data analysis experience'),
        ),
        migrations.RunPython(
            code=add_data_analysis_levels,
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='admin_fee_payment',
            field=models.CharField(choices=[('NP1', 'Non-profit / non-partner: US$2500'), ('partner', 'Partner: US$1250'), ('FP1', 'For-profit: US$10,000'), ('self-organized', 'Self-organized: no fee (please let us know if you wish to make a donation)'), ('waiver', 'Waiver requested (please give details in "Anything else")')], default='NP1', max_length=40, verbose_name='Which of the following applies to your payment for the administrative fee?'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='approx_attendees',
            field=models.CharField(choices=[('1-20', '1-20 (one room, one instructor)'), ('20-40', '20-40 (one room, two instructors)'), ('40-80', '40-80 (two rooms, four instructors)'), ('80-120', '80-120 (three rooms, six instructors)')], default='20-40', help_text="This number doesn't need to be precise, but will help us decide how many instructors your workshop will need.", max_length=40, verbose_name='Approximate number of Attendees'),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='language',
            field=models.CharField(blank=True, default='English', max_length=100, verbose_name='What human language do you want the workshop to be run in?'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='attendee_domains',
            field=models.ManyToManyField(help_text="The attendees' academic field(s) of study, if known.", to='workshops.KnowledgeDomain', verbose_name='Domains or topic of interest for target audience'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='location',
            field=models.CharField(help_text='City, Province, or State', max_length=100),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='preferred_date',
            field=models.CharField(help_text='Please indicate when you would like to run the workshop. A range of at least a month is most helpful, although if you have specific dates you need the workshop, we will try to accommodate those requests.', max_length=255, verbose_name='Preferred workshop dates'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='travel_reimbursement',
            field=models.CharField(blank=True, choices=[('', "Don't know yet."), ('book', 'Book travel through our university or program.'), ('reimburse', 'Book their own travel and be reimbursed.'), ('', 'Other (type below)')], default=None, max_length=40, null=True, verbose_name="How will instructors' travel and accommodations be managed?"),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='travel_reimbursement_other',
            field=models.CharField(blank=True, max_length=100, verbose_name="Other propositions for managing instructors' travel and accommodations"),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='understand_admin_fee',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=add_empty_knowledge_domain,
        ),
        migrations.AlterField(
            model_name='person',
            name='domains',
            field=models.ManyToManyField(blank=True, to='workshops.KnowledgeDomain'),
        ),
        migrations.AlterField(
            model_name='person',
            name='lessons',
            field=models.ManyToManyField(blank=True, through='workshops.Qualification', to='workshops.Lesson'),
        ),
        migrations.AlterField(
            model_name='person',
            name='gender',
            field=models.CharField(choices=[('U', 'Prefer not to say (undisclosed)'), ('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='U', max_length=1),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='airport_iata',
            field=models.CharField(help_text='Please use its 3-letter IATA code (<a href="http://www.airportcodes.aero/" target="_blank">http://www.airportcodes.aero/</a>) to tell us where you\'re located.', max_length=3, verbose_name='Nearest major airport'),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='email',
            field=models.EmailField(max_length=254, verbose_name='Email address'),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='gender',
            field=models.CharField(choices=[('U', 'Prefer not to say'), ('F', 'Female'), ('M', 'Male'), ('O', 'Other (enter below)')], default='U', max_length=1),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='lessons',
            field=models.ManyToManyField(help_text='Please mark ALL that apply.', to='workshops.Lesson', verbose_name="Topic and lessons you're comfortable teaching"),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='occupation',
            field=models.CharField(blank=True, choices=[('undisclosed', 'Prefer not to say'), ('undergrad', 'Undergraduate student'), ('grad', 'Graduate student'), ('postdoc', 'Post-doctoral researcher'), ('faculty', 'Faculty'), ('research', 'Research staff (including research programmer)'), ('support', 'Support staff (including technical support)'), ('librarian', 'Librarian/archivist'), ('commerce', 'Commercial software developer '), ('', 'Other (enter below)')], default='undisclosed', help_text='Please choose the one that best describes you.', max_length=40, verbose_name='What is your current occupation/career stage?'),
        ),
        migrations.AlterField(
            model_name='profileupdaterequest',
            name='twitter',
            field=models.CharField(blank=True, default='', max_length=100, verbose_name='Twitter username'),
        ),
        migrations.RunPython(
            code=add_country_to_online_events,
        ),
        migrations.RunPython(
            code=update_attendance_for_historical_events,
        ),
        migrations.AddField(
            model_name='event',
            name='invoice_status',
            field=models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('invoiced', 'Invoiced'), ('not-invoiced', 'Not invoiced'), ('na-self-org', 'Not applicable because self-organized'), ('na-waiver', 'Not applicable because waiver granted'), ('na-other', 'Not applicable because other arrangements made')], default='unknown', max_length=40, verbose_name='Invoice status'),
        ),
        migrations.RunPython(
            code=migrate_invoiced,
        ),
        migrations.RemoveField(
            model_name='event',
            name='invoiced',
        ),
        migrations.RunPython(
            code=switch_events_to_website_urls,
        ),
        migrations.AlterField(
            model_name='event',
            name='url',
            field=models.CharField(blank=True, help_text='Setting this and startdate "publishes" the event.<br />Use link to the event\'s website.', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('https?://github\\.com/(?P<name>[^/]+)/(?P<repo>[^/]+)/?', 32), inverse_match=True)]),
        ),
        migrations.RunPython(
            code=add_self_organized_host,
        ),
        migrations.RunPython(
            code=update_administrator_to_self_organized,
        ),
        migrations.AlterField(
            model_name='event',
            name='administrator',
            field=models.ForeignKey(blank=True, help_text='Organization responsible for administrative work.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='administrator', to='workshops.Host'),
        ),
        migrations.AddField(
            model_name='event',
            name='completed',
            field=models.BooleanField(default=False, help_text='Indicates that no more work is needed upon this event.'),
        ),
        migrations.CreateModel(
            name='TodoItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('title', models.CharField(default='', max_length=100)),
                ('due', models.DateField(blank=True, null=True)),
                ('additional', models.CharField(blank=True, default='', max_length=255)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshops.Event')),
            ],
        ),
        migrations.AlterModelOptions(
            name='todoitem',
            options={'ordering': ['due', 'title']},
        ),
        migrations.AddField(
            model_name='person',
            name='is_active',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            code=make_people_with_usable_passwords_active,
        ),
        migrations.AlterField(
            model_name='event',
            name='address',
            field=models.CharField(blank=True, default='', help_text='Required in order for this event to be "published".', max_length=255),
        ),
        migrations.AlterField(
            model_name='event',
            name='country',
            field=django_countries.fields.CountryField(blank=True, help_text='Required in order for this event to be "published".<br />Use <b>Online</b> for online events.', max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='latitude',
            field=models.FloatField(blank=True, help_text='Required in order for this event to be "published".', null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='longitude',
            field=models.FloatField(blank=True, help_text='Required in order for this event to be "published".', null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='start',
            field=models.DateField(blank=True, help_text='Required in order for this event to be "published".', null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='url',
            field=models.CharField(blank=True, help_text='Required in order for this event to be "published".<br />Use link to the event\'s <b>website</b>, not repository.', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('https?://github\\.com/(?P<name>[^/]+)/(?P<repo>[^/]+)/?', 32), inverse_match=True)]),
        ),
        migrations.AlterField(
            model_name='event',
            name='venue',
            field=models.CharField(blank=True, default='', help_text='Required in order for this event to be "published".', max_length=255),
        ),
        migrations.RunPython(
            code=add_address_to_online_events,
        ),
        migrations.AddField(
            model_name='event',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventrequest',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='event',
            name='invoice_status',
            field=models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('invoiced', 'Invoiced'), ('not-invoiced', 'Not invoiced'), ('ni-historic', 'Not invoiced for historical reasons'), ('ni-member', 'Not invoiced because of membership'), ('na-self-org', 'Not applicable because self-organized'), ('na-waiver', 'Not applicable because waiver granted'), ('na-other', 'Not applicable because other arrangements made')], default='unknown', max_length=40, verbose_name='Invoice status'),
        ),
        migrations.RunPython(
            code=no_invoice_for_historical_events,
        ),
        migrations.RunPython(
            code=mark_historical_events_completed,
        ),
        migrations.RunPython(
            code=add_stalled_unresponsive_tags,
        ),
        migrations.AlterField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(help_text="<ul><li><i>stalled</i> — for events with lost contact with the host or TTT events that aren't running.</li><li><i>unresponsive</i> – for events whose hosts and/or organizers aren't going to send us attendance data.</li></ul>", to='workshops.Tag'),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant', models.CharField(choices=[('partner', 'Partner'), ('affiliate', 'Affiliate'), ('sponsor', 'Sponsor')], max_length=40)),
                ('agreement_start', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('agreement_end', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('contribution_type', models.CharField(blank=True, choices=[('financial', 'Financial'), ('person-days', 'Person-days'), ('other', 'Other')], max_length=40, null=True)),
                ('workshops_without_admin_fee_per_year', models.PositiveIntegerField(blank=True, help_text='Acceptable number of workshops without admin fee per year', null=True)),
                ('self_organized_workshops_per_year', models.PositiveIntegerField(blank=True, help_text='Imposed number of self-organized workshops per year', null=True)),
                ('notes', models.TextField(blank=True, default='')),
                ('host', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='workshops.Host')),
            ],
        ),
        migrations.RunPython(
            code=change_instructor_badge_to_swc_instructor,
        ),
        migrations.RunPython(
            code=add_dc_instructor_badge,
        ),
        migrations.AlterField(
            model_name='person',
            name='username',
            field=models.CharField(max_length=40, unique=True, validators=[django.core.validators.RegexValidator('^[\\w\\.]+$', flags=256)]),
        ),
        migrations.AddField(
            model_name='event',
            name='instructors_post',
            field=models.URLField(blank=True, default='', verbose_name='Pre-workshop assessment survey for instructors'),
        ),
        migrations.AddField(
            model_name='event',
            name='instructors_pre',
            field=models.URLField(blank=True, default='', verbose_name='Pre-workshop assessment survey for instructors'),
        ),
        migrations.AddField(
            model_name='event',
            name='learners_longterm',
            field=models.URLField(blank=True, default='', verbose_name='Long-term assessment survey for learners'),
        ),
        migrations.AddField(
            model_name='event',
            name='learners_post',
            field=models.URLField(blank=True, default='', verbose_name='Post-workshop assessment survey for learners'),
        ),
        migrations.AddField(
            model_name='event',
            name='learners_pre',
            field=models.URLField(blank=True, default='', verbose_name='Pre-workshop assessment survey for learners'),
        ),
        migrations.AddField(
            model_name='person',
            name='occupation',
            field=models.CharField(blank=True, default='', max_length=100, verbose_name='Current occupation/career stage'),
        ),
        migrations.AddField(
            model_name='person',
            name='orcid',
            field=models.CharField(blank=True, default='', max_length=100, verbose_name='ORCID ID'),
        ),
        migrations.RunPython(
            code=add_maintainer_badge,
        ),
        migrations.RunPython(
            code=change_dots_to_underscores,
        ),
        migrations.AlterField(
            model_name='event',
            name='invoice_status',
            field=models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('invoiced', 'Invoiced'), ('not-invoiced', 'Not invoiced'), ('na-historic', 'Not applicable for historical reasons'), ('na-member', 'Not applicable because of membership'), ('na-self-org', 'Not applicable because self-organized'), ('na-waiver', 'Not applicable because waiver granted'), ('na-other', 'Not applicable because other arrangements made')], default='unknown', max_length=40, verbose_name='Invoice status'),
        ),
        migrations.AlterField(
            model_name='person',
            name='username',
            field=models.CharField(max_length=40, unique=True, validators=[django.core.validators.RegexValidator('^[\\w\\-_]+$', flags=256)]),
        ),
        migrations.RunPython(
            code=switch_invoice_ni_to_na,
        ),
        migrations.AddField(
            model_name='event',
            name='request',
            field=models.ForeignKey(blank=True, help_text='Backlink to the request that created this event.', null=True, on_delete=django.db.models.deletion.CASCADE, to='workshops.EventRequest'),
        ),
        migrations.CreateModel(
            name='InvoiceRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not-invoiced', 'Not invoiced'), ('sent', 'Sent out'), ('paid', 'Paid')], default='not-invoiced', max_length=40, verbose_name='Invoice status')),
                ('reason', models.CharField(blank=True, choices=[('admin-fee', 'Workshop administrative fee'), ('admin-fee-expenses', 'Workshop administrative fee plus expenses'), ('partner', 'Partner agreement'), ('affiliate', 'Affiliate agreement'), ('consulting', 'Consulting'), ('', 'Other (enter below)')], default='admin-fee', max_length=40, verbose_name='Reason for invoice')),
                ('reason_other', models.CharField(blank=True, default='', max_length=100, verbose_name='Other reason for invoice')),
                ('date', models.DateField(help_text="YYYY-MM-DD; either event's date or invoice reason date.", verbose_name='Date of invoice subject')),
                ('event_location', models.CharField(blank=True, default='', max_length=100)),
                ('item_id', models.CharField(blank=True, default='', max_length=40, verbose_name='Item ID (if applicable)')),
                ('postal_number', models.CharField(blank=True, default='', max_length=40, verbose_name='PO # (if required)')),
                ('contact_name', models.CharField(help_text='e.g. Dr. Jane Smith - the name of the person to contact at the organization about the invoice', max_length=100, verbose_name='Organization contact name')),
                ('contact_email', models.EmailField(max_length=100, verbose_name='Organization contact email')),
                ('contact_phone', models.CharField(blank=True, max_length=100, verbose_name='Organization contact phone #')),
                ('full_address', models.TextField(help_text='e.g. Dr. Jane Smith; University of Florida Ecology Department; 123 University Way; Gainesville, FL 32844', verbose_name='Full address to invoice')),
                ('amount', models.DecimalField(decimal_places=2, help_text='e.g. 1992.33 ', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Full invoice amount')),
                ('currency', models.CharField(blank=True, choices=[('USD', 'US Dollars'), ('GBP', 'UK Pounds'), ('EUR', 'Euros'), ('', 'Other (enter below)')], default='USD', max_length=40)),
                ('currency_other', models.CharField(blank=True, default='', max_length=100, verbose_name='Other currency')),
                ('breakdown', models.TextField(blank=True, default='', help_text='e.g. 1250.00 workshop fee; 742.33 Instructor, Pat Li, travel expenses', verbose_name='Notes on invoice breakdown')),
                ('vendor_form_required', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('unsure', 'Will check with contact and submit info if needed')], default='no', max_length=10, verbose_name='Do vendor/supplier forms need to be submitted?')),
                ('vendor_form_link', models.URLField(blank=True, default='', verbose_name='Link to vendor/supplier forms')),
                ('form_W9', models.BooleanField(verbose_name='Organization needs a W-9 form')),
                ('receipts_sent', models.CharField(choices=[('email', 'Via email'), ('shared', 'In a Google Drive or other shared location'), ('not-yet', "Haven't sent yet"), ('na', 'Not applicable')], default='not-yet', max_length=40, verbose_name='Any required receipts sent?')),
                ('shared_receipts_link', models.URLField(blank=True, default='', help_text='e.g. link to Google drive folder', verbose_name='Link to receipts in shared location')),
                ('notes', models.TextField(blank=True, default='', verbose_name='Any other notes')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='workshops.Event')),
                ('organization', models.ForeignKey(help_text='e.g. University of Florida Ecology Department', on_delete=django.db.models.deletion.PROTECT, to='workshops.Host', verbose_name='Organization to invoice')),
                ('paid_date', models.DateField(blank=True, help_text='YYYY-MM-DD', null=True, verbose_name='Date invoice was paid')),
                ('sent_date', models.DateField(blank=True, help_text='YYYY-MM-DD', null=True, verbose_name='Date invoice was sent out')),
            ],
        ),
        migrations.AlterField(
            model_name='event',
            name='invoice_status',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('invoiced', 'Invoiced'), ('not-invoiced', 'Not invoiced'), ('na-historic', 'Not applicable for historical reasons'), ('na-member', 'Not applicable because of membership'), ('na-self-org', 'Not applicable because self-organized'), ('na-waiver', 'Not applicable because waiver granted'), ('na-other', 'Not applicable because other arrangements made')], default='unknown', max_length=40, verbose_name='Invoice status'),
        ),
        migrations.CreateModel(
            name='EventSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('url', models.URLField(verbose_name="Link to the workshop's website")),
                ('contact_name', models.CharField(max_length=100, verbose_name='Your name')),
                ('contact_email', models.EmailField(help_text='We may need to contact you regarding workshop details.', max_length=254, verbose_name='Your email')),
                ('self_organized', models.BooleanField(default=False, verbose_name='Was the workshop self-organized?')),
                ('notes', models.TextField(blank=True, default='')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='award',
            name='awarded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='awarded_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='profileupdaterequest',
            name='notes',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.RunPython(
            code=add_hackathon_tags,
        ),
        migrations.AlterField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(to='workshops.Tag'),
        ),
        migrations.AlterField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(help_text="<ul><li><i>stalled</i> — for events with lost contact with the host or TTT events that aren't running.</li><li><i>unresponsive</i> – for events whose hosts and/or organizers aren't going to send us attendance data.</li></ul>", to='workshops.Tag'),
        ),
        migrations.AlterField(
            model_name='eventrequest',
            name='approx_attendees',
            field=models.CharField(choices=[('1-20', '1-20 (one room, two instructors)'), ('20-40', '20-40 (one room, two instructors)'), ('40-80', '40-80 (two rooms, four instructors)'), ('80-120', '80-120 (three rooms, six instructors)')], default='20-40', help_text="This number doesn't need to be precise, but will help us decide how many instructors your workshop will need.Each workshop must have at least two instructors.", max_length=40, verbose_name='Approximate number of Attendees'),
        ),
        migrations.RunPython(
            code=lowercase_emails,
        ),
        migrations.AlterField(
            model_name='event',
            name='instructors_post',
            field=models.URLField(blank=True, default='', verbose_name='Post-workshop assessment survey for instructors'),
        ),
        migrations.AddField(
            model_name='event',
            name='repository_last_commit_hash',
            field=models.CharField(blank=True, default='', help_text="Event's repository last commit SHA1 hash", max_length=40),
        ),
        migrations.AddField(
            model_name='event',
            name='repository_tags',
            field=models.TextField(blank=True, default='', help_text="JSON-serialized tags from event's website"),
        ),
        migrations.AddField(
            model_name='event',
            name='tag_changes_detected',
            field=models.TextField(blank=True, default='', help_text='List of detected tag changes'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags_changed',
            field=models.BooleanField(default=False, help_text='Indicate if tags changed since last check'),
        ),
    ]
